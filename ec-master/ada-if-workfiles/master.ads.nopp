
pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with System;

with Cdev;
with linux_types;
   
package Master is
   package L  renames linux_types;
   
   ------------------
   --  data types  --
   ------------------
   
   type ec_master_phase_t is 
     -- EtherCAT master phase.
     (EC_ORPHANED,
      -- Orphaned phase. The master has no Ethernet device attached.
      EC_IDLE,
      -- Idle phase. An Ethernet device is attached, but the master
      --               is not in use, yet. 
      EC_OPERATION
	-- Operation phase. The master was requested by a realtime
	--                   application.
     );
   pragma Convention (C, ec_master_phase_t);
   
   
   type ec_stats_t is record
      -- Cyclic statistics.
      timeouts       : aliased unsigned;
      -- datagram timeouts 
      corrupted      : aliased unsigned;
      -- corrupted frames 
      unmatched      : aliased unsigned;
      -- unmatched datagrams (received, but not queued any longer) 
      output_jiffies : aliased unsigned_long;
      -- time of last output
      end record;
   pragma Convention (C_Pass_By_Copy, ec_stats_t);
   
   
   type ec_device_stats_t_tx_frame_rates_array is 
     array (0 .. 2) of aliased L.s32;
   type ec_device_stats_t_rx_frame_rates_array is 
     array (0 .. 2) of aliased L.s32;
   type ec_device_stats_t_tx_byte_rates_array is 
     array (0 .. 2) of aliased L.s32;
   type ec_device_stats_t_rx_byte_rates_array is 
     array (0 .. 2) of aliased L.s32;
   type ec_device_stats_t_loss_rates_array is 
     array (0 .. 2) of aliased L.s32;
   
   type ec_device_stats_t is record
      tx_count : aliased L.u64;
      last_tx_count : aliased L.u64;
      rx_count : aliased L.u64;
      last_rx_count : aliased L.u64;
      tx_bytes : aliased L.u64;
      last_tx_bytes : aliased L.u64;
      rx_bytes : aliased L.u64;
      last_rx_bytes : aliased L.u64;
      last_loss : aliased L.u64;
      tx_frame_rates : aliased ec_device_stats_t_tx_frame_rates_array;
      rx_frame_rates : aliased ec_device_stats_t_rx_frame_rates_array;
      tx_byte_rates : aliased ec_device_stats_t_tx_byte_rates_array;
      rx_byte_rates : aliased ec_device_stats_t_rx_byte_rates_array;
      loss_rates : aliased ec_device_stats_t_loss_rates_array;
      jiffies : aliased unsigned_long;
      -- Jiffies of last statistic cycle.
   end record;
   pragma Convention (C_Pass_By_Copy, ec_device_stats_t);
   
   rate_intervals : aliased array (0 .. 2) of aliased unsigned;
   pragma Import (C, rate_intervals, "rate_intervals");
   
   -- where we need 'ec_master_type ' we willl make a bridge in master.c
   
   subtype Ec_Master_T_Ptr is System.Address;
   subtype Ec_Device_T_Ptr is System.Address;
   
   ---------------
   --  methods  --
   ---------------
   
   -- stats  --
   
   procedure ec_master_output_stats (arg1 : Ec_Master_T_Ptr);
   -- Output master statistics.
   -- This function outputs statistical data on demand, but not more often than
   -- necessary. The output happens at most once a second.
   pragma Import (C, ec_master_output_stats, "ec_master_output_stats");
   
   procedure ec_master_clear_device_stats (arg1 : Ec_Master_T_Ptr);
   -- Clears the common device statistics.
   pragma Import 
     (C, Ec_Master_Clear_Device_Stats, "ec_master_clear_device_stats");
   
   procedure ec_master_update_device_stats (arg1 : Ec_Master_T_Ptr);
   -- Updates the common device statistics.
   pragma Import 
     (C, Ec_Master_Update_Device_Stats, "ec_master_update_device_stats");
   
   
   
   procedure ec_master_init_static;
   -- static funtions
   pragma Import (C, ec_master_init_static, "ec_master_init_static");
   
   function ec_master_init return int;
   -- master creation/deletion
   pragma Import (C, ec_master_init, "ec_master_init");
   
   procedure ec_master_clear (arg1 : Ec_Master_T_Ptr);
   -- master deletion
   pragma Import (C, ec_master_clear, "ec_master_clear");
   
   -- phase transitions
   
   function ec_master_enter_idle_phase (arg1 : Ec_Master_T_Ptr)
				       return int;
   pragma Import 
     (C, ec_master_enter_idle_phase, "ec_master_enter_idle_phase");
   
   procedure ec_master_leave_idle_phase (arg1 : Ec_Master_T_Ptr);
   pragma Import 
     (C, Ec_Master_Leave_Idle_Phase, "ec_master_leave_idle_phase");
   
   function ec_master_enter_operation_phase (arg1 : Ec_Master_T_Ptr)
					    return int;
   pragma Import 
     (C, Ec_Master_Enter_Operation_Phase, "ec_master_enter_operation_phase");
   
   procedure ec_master_leave_operation_phase (arg1 : Ec_Master_T_Ptr);
   pragma Import 
     (C, Ec_Master_Leave_Operation_Phase, "ec_master_leave_operation_phase");
   
   -- datagram IO
   
   procedure Ec_Master_Receive_Datagrams (arg1 : Ec_Master_T_Ptr;
					  arg2 : Ec_Device_T_Ptr;
					  arg3 : access L.U8;
					  arg4 : L.Size_T);
   pragma Import 
     (C, ec_master_receive_datagrams, "ec_master_receive_datagrams");
   
   
   procedure ec_master_set_send_interval (arg1 : Ec_Master_T_Ptr; 
					  arg2 : unsigned);
   pragma Import 
     (C, ec_master_set_send_interval, "ec_master_set_send_interval");
   
   
   function ec_master_debug_level (arg1 : Ec_Master_T_Ptr;
				   arg2 : unsigned) 
				  return int;
   pragma Import (C, ec_master_debug_level, "ec_master_debug_level");
   
end Master;

      


